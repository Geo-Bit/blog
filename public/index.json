
[{"content":"","date":"1 July 2024","externalUrl":null,"permalink":"/tags/appsec/","section":"Tags","summary":"","title":"AppSec","type":"tags"},{"content":"","date":"1 July 2024","externalUrl":null,"permalink":"/categories/blog/","section":"Categories","summary":"","title":"Blog","type":"categories"},{"content":"","date":"1 July 2024","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"1 July 2024","externalUrl":null,"permalink":"/tags/docker/","section":"Tags","summary":"","title":"Docker","type":"tags"},{"content":"","date":"1 July 2024","externalUrl":null,"permalink":"/","section":"Geo","summary":"","title":"Geo","type":"page"},{"content":"","date":"1 July 2024","externalUrl":null,"permalink":"/categories/post/","section":"Categories","summary":"","title":"Post","type":"categories"},{"content":"","date":"1 July 2024","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":" Securing the Ship: Tackling Docker Image Flaws # I\u0026rsquo;ve spent some time delving into the complexities of finding and remediating vulnerabilities in Docker container images over the past several months. This article explores various detection mechanisms, including references to specific tooling, and provides remediation processes for addressing vulnerabilities in Docker container images. I\u0026rsquo;ll discuss the differences between software composition analysis (SCA) vulnerabilities and first-party vulnerabilities, and the challenges associated with remediation efforts. Additionally, I\u0026rsquo;ll share personal observations and insights from my experience in the field.\nDetection Mechanisms # Software Composition Analysis (SCA) Tools # SCA tools are designed to analyze the components within your Docker images and identify known vulnerabilities. Some popular SCA tools include:\nSnyk: Snyk integrates with Docker to scan images for known vulnerabilities and provides actionable remediation advice. I found Snyk particularly useful during a recent project where we needed to ensure the security of our containerized applications without disrupting the development workflow. Aqua Security: Aqua Security offers comprehensive scanning for vulnerabilities in Docker images and integrates seamlessly with CI/CD pipelines. In my experience, Aqua Security\u0026rsquo;s deep integration with various DevOps tools makes it a go-to solution for continuous monitoring. Clair: Clair is an open-source project that scans Docker images for vulnerabilities in the packages installed in them. Clair’s flexibility and ease of integration into custom CI/CD pipelines were invaluable in a recent security assessment I conducted. # Example: Scanning a Docker image with Snyk snyk container test my-docker-image First-Party Vulnerabilities # First-party vulnerabilities refer to issues introduced by the custom code and configurations within your Docker images. Detecting these requires a combination of static analysis, dynamic analysis, and manual review.\nStatic Code Analysis: Tools like SonarQube and Bandit can analyze your source code for security issues before it\u0026rsquo;s built into a Docker image. During one code audit, using SonarQube revealed a critical flaw in our custom middleware, which could have led to a significant data breach if not addressed. Dynamic Analysis: Tools like OWASP ZAP can be used to perform dynamic testing against running containers to identify vulnerabilities. I\u0026rsquo;ve seen dynamic analysis catch runtime issues that static analysis tools missed, highlighting the importance of a multi-faceted approach. # Example: Using Bandit for static code analysis bandit -r /path/to/your/code Personal Observations # During my time threat hunting in Docker environments, I noticed several patterns and common issues. One frequent observation was the over-reliance on outdated base images, which often contained numerous vulnerabilities. In a collaborative work environment, I found that regular security training for developers significantly reduced the number of first-party vulnerabilities introduced into our Docker images.\nA lot of the popular IaC scanning tools recommend adding additional lines to the Dockerfile to update individual dependencies. While this approach works, I feel that it is not as efficient as it could be. These tools often lack the context and consideration of all dependencies being used, and common transitive dependencies within multiple components. For example, if you have 5 transitive dependencies in your Dockerfile, you could update explicity update those depedencies, or simply update the transitive top-level dependency which could resolve all the vulnerable transitives.\nRemediation Processes # Updating Base Images # One of the most straightforward remediation steps is to update the base images used in your Dockerfiles. Ensure you\u0026rsquo;re using the latest, secure versions of base images.\n# Example: Updating a Dockerfile to use a secure base image FROM ubuntu:20.04 RUN apt-get update \u0026amp;\u0026amp; \\ apt-get install -y \\ nodejs \\ npm COPY . /app RUN cd /app \u0026amp;\u0026amp; npm install CMD [\u0026#34;node\u0026#34;, \u0026#34;/app/index.js\u0026#34;] Patching Dependencies # Ensuring that all dependencies are up to date is crucial. Tools like Dependabot can automate dependency updates, making it easier to keep your Docker images secure.\n# Example: Using Dependabot to automate dependency updates version: 2 updates: - package-ecosystem: \u0026#34;npm\u0026#34; directory: \u0026#34;/\u0026#34; schedule: interval: \u0026#34;daily\u0026#34; Implementing Security Best Practices # Adopt best practices for Docker image security, such as minimizing the attack surface by using minimal base images like Alpine, and ensuring proper user permissions within containers. This was a game-changer in a project where we had to harden our containers for a financial services client.\n# Example: Using a minimal base image FROM alpine:3.12 RUN apk add --no-cache nodejs npm COPY . /app RUN cd /app \u0026amp;\u0026amp; npm install USER node CMD [\u0026#34;node\u0026#34;, \u0026#34;/app/index.js\u0026#34;] Challenges in Docker Vulnerability Remediation # Remediating vulnerabilities in Docker images is not without its challenges. Some key difficulties include:\nDependency Hell: Managing and updating dependencies can be complex, especially when dealing with large, multi-layered Docker images. I remember a particular instance where conflicting dependencies between two essential services caused significant delays in our deployment schedule. Continuous Monitoring: Docker images need continuous monitoring for new vulnerabilities, requiring integration with CI/CD pipelines and constant vigilance. At my workplace, setting up automated scans and integrating them with our CI/CD pipeline helped catch vulnerabilities early in the development cycle. Balancing Security and Functionality: Ensuring security without breaking functionality can be a delicate balance, often requiring in-depth testing and validation. This balance is critical, as I’ve seen how overly restrictive security measures can stifle productivity and lead to workarounds that introduce new risks. Key Takeaways # Regular Scanning: Regularly scan your Docker images using both SCA tools and first-party vulnerability detection methods. This proactive approach has saved me from countless potential incidents. Automate Updates: Automate dependency and base image updates to reduce the risk of vulnerabilities. Automation tools have significantly reduced the manual overhead and error rate in our processes. Follow Best Practices: Implement Docker security best practices to minimize the attack surface and enhance overall security. Best practices, when consistently followed, create a robust baseline security posture. Continuous Vigilance: Continuously monitor and update Docker images to stay ahead of emerging threats. Staying updated with the latest security trends and vulnerabilities is part of my daily routine. Recent research from the application security industry highlights the critical importance of proactive vulnerability management in Docker environments. Studies by organizations like Snyk and Aqua Security emphasize that regular scanning and prompt remediation are essential to maintaining secure containerized applications. The dynamic nature of threats makes continuous learning and adaptation crucial.\n","date":"1 July 2024","externalUrl":null,"permalink":"/posts/2024-07-01-securing-the-ship/","section":"Posts","summary":"","title":"Securing the Ship: Tackling Docker Image Flaws","type":"posts"},{"content":"","date":"1 July 2024","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"1 July 2024","externalUrl":null,"permalink":"/tags/vulnerability-management/","section":"Tags","summary":"","title":"Vulnerability Management","type":"tags"},{"content":"","date":"20 June 2024","externalUrl":null,"permalink":"/tags/azure/","section":"Tags","summary":"","title":"Azure","type":"tags"},{"content":" Azure Subdomain Takeover \u0026amp; Dangling DNS # As a security researcher and application security engineer, I frequently encounter the issue of dangling DNS or subdomain takeovers, particularly within Microsoft Azure environments. This occurs when web applications are deleted, but their associated CNAME records on custom domains are not removed. This leaves the domain vulnerable to malicious actors who can redirect traffic to their own infrastructure.\nUnderstanding the Problem # When you create a web application in Azure and assign it a custom domain using a CNAME record, you establish a link between your domain and Azure\u0026rsquo;s resources. If these resources are later deleted without removing the CNAME record, the domain remains pointed to a now non-existent resource. This creates a \u0026ldquo;dangling\u0026rdquo; DNS entry.\nWhat Happens Next? # Domain Availability Check: Attackers can periodically check for available subdomains. Resource Re-creation: They can then create a resource in Azure with the same name, effectively taking over the subdomain. Malicious Redirection: The hijacked subdomain can be used to serve malicious content, phish for credentials, or spread malware. Real-world Example # Let\u0026rsquo;s say you have a CNAME record pointing app.example.com to myapp.azurewebsites.net. If myapp is deleted but the CNAME record remains, an attacker can claim myapp in Azure, and app.example.com will now point to their resource.\nDNS Provider Configuration # For demonstration, we\u0026rsquo;ll use a common DNS provider, such as GoDaddy, to illustrate how to check and remove these records.\nexample.com ├── www.example.com (CNAME -\u0026gt; myapp.azurewebsites.net) ├── app.example.com (CNAME -\u0026gt; myapp.azurewebsites.net) └── blog.example.com (A -\u0026gt; 192.0.2.1) Mitigation and Remediation Strategies # Regular Audits # Perform regular audits of your DNS records to ensure they are still valid. Tools and scripts can automate this process.\n# Simple script to check DNS records for domain in $(cat domains.txt); do nslookup $domain | grep \u0026#34;can\u0026#39;t find\u0026#34; \u0026amp;\u0026amp; echo \u0026#34;$domain is dangling\u0026#34; done Automated Cleanup # Implement automated cleanup of DNS records when deleting Azure resources. Azure Resource Manager (ARM) templates and scripts can be configured to remove DNS entries.\n{ \u0026#34;resources\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;Microsoft.Network/dnszones/CNAME\u0026#34;, \u0026#34;apiVersion\u0026#34;: \u0026#34;2018-05-01\u0026#34;, \u0026#34;properties\u0026#34;: { \u0026#34;TTL\u0026#34;: 3600, \u0026#34;CNAMERecord\u0026#34;: { \u0026#34;cname\u0026#34;: \u0026#34;myapp.azurewebsites.net\u0026#34; } }, \u0026#34;dependsOn\u0026#34;: [\u0026#34;[resourceId(\u0026#39;Microsoft.Web/sites\u0026#39;, \u0026#39;myapp\u0026#39;)]\u0026#34;] } ] } Use Azure Managed Services # Where possible, use Azure-managed services that handle DNS records for you. Azure Front Door, for example, can manage your custom domains and reduce the risk of dangling DNS.\nConclusion # Dangling DNS records pose a significant security risk, especially in dynamic cloud environments like Azure. By understanding the problem and implementing the strategies outlined above, you can mitigate and remediate these risks effectively. Regular audits, automated cleanups, and utilizing managed services are key steps to securing your domains.\nStay vigilant and keep your infrastructure secure!\n","date":"20 June 2024","externalUrl":null,"permalink":"/posts/2024-06-20-azure-subdomain-takeover/","section":"Posts","summary":"","title":"Azure Subdomain Takeover \u0026 Dangling DNS","type":"posts"},{"content":"","date":"20 June 2024","externalUrl":null,"permalink":"/tags/dns/","section":"Tags","summary":"","title":"DNS","type":"tags"},{"content":"","date":"20 June 2024","externalUrl":null,"permalink":"/tags/security/","section":"Tags","summary":"","title":"Security","type":"tags"},{"content":"","date":"29 September 2023","externalUrl":null,"permalink":"/tags/alerting/","section":"Tags","summary":"","title":"Alerting","type":"tags"},{"content":" Introduction # Proxmox Virtual Environment (Proxmox VE) is a powerful open-source virtualization platform that combines two virtualization technologies: KVM (Kernel-based Virtual Machine) for virtual machines and LXC (Linux Containers) for lightweight container-based virtualization. Monitoring your Proxmox environment is crucial for ensuring its reliability and performance. In this guide, we\u0026rsquo;ll explore how to set up automated Proxmox monitoring and alerting to keep your virtual infrastructure in check.\nPrerequisites # Before we begin, make sure you have the following prerequisites:\nA Proxmox Virtual Environment (Proxmox VE) installation. Access to the Proxmox web interface. A server or virtual machine running an operating system that supports Docker. Step 1: Install Docker and Docker Compose # Proxmox monitoring and alerting can be simplified by using Docker containers. Start by installing Docker and Docker Compose on a server or VM that can communicate with your Proxmox host. You can follow the official Docker installation instructions for your chosen operating system.\nStep 2: Create a Docker Compose Configuration # Create a directory for your Proxmox monitoring configuration files. Inside this directory, create a docker-compose.yml file with the following content:\nversion: \u0026#34;3\u0026#34; services: prometheus: image: prom/prometheus container_name: prometheus ports: - 9090:9090 volumes: - /path/to/prometheus-config:/etc/prometheus command: - \u0026#34;--config.file=/etc/prometheus/prometheus.yml\u0026#34; alertmanager: image: prom/alertmanager container_name: alertmanager ports: - 9093:9093 volumes: - /path/to/alertmanager-config:/etc/alertmanager command: - \u0026#34;--config.file=/etc/alertmanager/config.yml\u0026#34; Replace /path/to/prometheus-config and /path/to/alertmanager-config with the paths to your configuration directories.\nStep 3: Configure Prometheus # Create a prometheus.yml file inside your /path/to/prometheus-config directory with the following content:\nglobal: scrape_interval: 15s scrape_configs: - job_name: \u0026#34;proxmox\u0026#34; static_configs: - targets: [\u0026#34;proxmox-host-ip:9100\u0026#34;] Replace \u0026lsquo;proxmox-host-ip\u0026rsquo; with the IP address or hostname of your Proxmox host.\nStep 4: Configure AlertManager # Create a config.yml file inside your /path/to/alertmanager-config directory. Here\u0026rsquo;s a sample configuration for AlertManager:\nroute: group_by: [\u0026#34;alertname\u0026#34;] group_wait: 30s group_interval: 5m repeat_interval: 1h receiver: \u0026#34;default\u0026#34; receivers: - name: \u0026#34;default\u0026#34; email_configs: - to: \u0026#34;your-email@example.com\u0026#34; Configure the email recipient address in the to field.\nStep 5: Start Docker Containers # Navigate to the directory containing your docker-compose.yml file and run the following command to start Prometheus and AlertManager in Docker containers:\ndocker-compose up -d Step 6: Configure Proxmox Alerts # In the Proxmox web interface, navigate to \u0026ldquo;Datacenter\u0026rdquo; \u0026gt; \u0026ldquo;Nodes\u0026rdquo; \u0026gt; \u0026ldquo;Your Node\u0026rdquo; \u0026gt; \u0026ldquo;System\u0026rdquo; \u0026gt; \u0026ldquo;Email.\u0026rdquo; Set up email notifications, and configure alerts to send emails to your AlertManager.\nConclusion # Automated Proxmox monitoring and alerting using Docker containers, Prometheus, and AlertManager ensures that your Proxmox virtual environment stays healthy and responsive. You can receive timely alerts about system health and take proactive measures to maintain a reliable virtual infrastructure. Monitoring and alerting are essential components of managing your Proxmox VE effectively, ensuring your virtual machines and containers run smoothly.\n","date":"29 September 2023","externalUrl":null,"permalink":"/posts/2023-09-29-proxmox-monitoring/","section":"Posts","summary":"","title":"Automated Monitoring and Alerting for Proxmox","type":"posts"},{"content":"","date":"29 September 2023","externalUrl":null,"permalink":"/tags/monitoring/","section":"Tags","summary":"","title":"Monitoring","type":"tags"},{"content":"","date":"29 September 2023","externalUrl":null,"permalink":"/tags/proxmox/","section":"Tags","summary":"","title":"Proxmox","type":"tags"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]